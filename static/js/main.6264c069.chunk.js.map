{"version":3,"sources":["Navbar.js","globalFunctions.js","Card.js","Form.js","Main.js","Section.js","QuizSectionCapitalCity.js","QuizSection.js","App.js","index.js"],"names":["Navbar","props","togglingMode","setToggleDarkMode","toggleDarkMode","react_default","a","createElement","className","onClick","role","aria-label","formatPopulation","num","stringNumber","toString","replace","randomCountry","array","Math","floor","random","length","Card","selectCard","src","item","flags","png","alt","concat","name","common","toggleQuizSection","population","region","capital","Form","formSearch","event","setFormData","prevFormData","Object","objectSpread","defineProperty","target","value","type","placeholder","onChange","formData","countryName","id","regionName","hidden","Main","_React$useState","React","useState","_React$useState2","slicedToArray","countryData","map","currentObject","setChooseCountry","setToggleSection","renderSearchedCountry","currentCountry","lowerCase","toLowerCase","includes","key","setToggleQuizSection","Section","borderCountry","setBorderCountry","nativeNameObj","nativeName","nativeNameFirst","keys","currencyObj","currencies","currencyObjFirst","languagesArray","values","languages","languageString","language","i","useEffect","borders","country","cca3","prevState","toConsumableArray","console","log","borderButtons","svg","subregion","tld","CapitalCityQuestion","wrongCountryOne","_React$useState3","_React$useState4","wrongCountryTwo","_React$useState5","_React$useState6","userSelection","setUserSelection","_React$useState7","_React$useState8","chosenArray","setChosenArray","randomCountriesArray","countryOne","countryTwo","setScore","prevScore","setQuestionsAsked","mapButtons","checkAnswers","QuizSection","score","questionsAsked","renderCountries","App","setCountryData","chooseCountry","toggleSection","_React$useState9","_React$useState10","_getCountryAPI","asyncToGenerator","_regeneratorRuntime","mark","_callee","res","data","wrap","_context","prev","next","fetch","sent","json","stop","apply","this","arguments","getCountryAPI","renderMainComponent","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.6264c069.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Navbar (props) {\r\n\r\n    function togglingMode() {\r\n        props.setToggleDarkMode(!props.toggleDarkMode)\r\n    }\r\n\r\n    return (\r\n        <nav className={props.toggleDarkMode ? \"DarkMinor Navbar\" : \"LightMinor Navbar\"}>\r\n            <div className='Navbar-inner'>\r\n                <h1>Where in the world?</h1>\r\n                {props.toggleDarkMode ? <h4 onClick={() => togglingMode()}><span role=\"img\" aria-label=\"Sun emoji\">&#127774;</span> Light Mode</h4> :\r\n                <h4 onClick={() => togglingMode()}><span role=\"img\" aria-label=\"Moon emoji\">&#127769;</span> Dark Mode</h4>}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport {Navbar}","\r\n// Number with commas added\r\n\r\nfunction formatPopulation(num) {\r\n    let stringNumber = num.toString()\r\n    stringNumber = stringNumber.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n    return stringNumber\r\n}\r\n\r\nfunction randomCountry(array) {\r\n    return array[Math.floor(Math.random() * array.length)]\r\n}\r\n\r\nexport {formatPopulation}\r\nexport {randomCountry}","import React from 'react'\r\nimport {formatPopulation} from './globalFunctions'\r\n\r\nfunction Card (props) {\r\n    \r\n    function conditionalList () {\r\n        if (props.toggleQuizSection) {\r\n            return (\r\n                <ul>\r\n                    <li><span>Population: ???</span></li>\r\n                    <li><span>Region: ???</span></li>\r\n                    <li><span>Capital: ???</span></li>\r\n                </ul>\r\n            )\r\n        } else {\r\n            return (\r\n                <ul>\r\n                    <li><span>Population:</span> {formatPopulation(props.item.population)}</li>\r\n                    <li><span>Region:</span> {props.item.region}</li>\r\n                    <li><span>Capital:</span> {props.item.capital}</li>\r\n                </ul>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div onClick={props.selectCard} className={props.toggleDarkMode ? \"DarkMinor Card-container\" : \"LightMinor Card-container\"}>\r\n            <img src={props.item.flags.png} alt={`${props.item.name.common} flag`}/>\r\n            <div className='Card-container-inner'>\r\n                <h3>{props.item.name.common}</h3>\r\n                {conditionalList()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {Card}","import React from 'react'\r\n\r\nfunction Form (props) {\r\n\r\n    function formSearch(event) {\r\n        props.setFormData(prevFormData => {\r\n            return {\r\n                ...prevFormData,\r\n                [event.target.name]: event.target.value\r\n            }\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <form className='Form-container'>\r\n            <div className= {props.toggleDarkMode ? \"DarkMinor Form-input-container\" : \"LightMinor Form-input-container\"}>\r\n                <p><span role=\"img\" aria-label=\"Magnifying glass emoji\">&#x1F50D;</span></p>\r\n                <input className={props.toggleDarkMode ? \"DarkMinor Form-input\" : \"LightMinor Form-input\"}\r\n                    type=\"text\"\r\n                    placeholder='Search for a country'\r\n                    name=\"countryName\"\r\n                    onChange = {formSearch}\r\n                    value = {props.formData.countryName}\r\n                />\r\n            </div>\r\n            <div className= \"Form-select-container\">\r\n                <select\r\n                    id= \"regionName\"\r\n                    value = {props.formData.regionName}\r\n                    onChange = {formSearch}\r\n                    name=\"regionName\"\r\n                    className={props.toggleDarkMode ? \"DarkMinor\" : \"LightMinor\"}\r\n                >\r\n                    <option hidden value=\"\">Filter by Region</option>\r\n                    <option hidden={!props.formData.regionName} value=\"\">None</option>\r\n                    <option value=\"Africa\">Africa</option>\r\n                    <option value=\"Americas\">America</option>\r\n                    <option value=\"Asia\">Asia</option>\r\n                    <option value=\"Europe\">Europe</option>\r\n                    <option value=\"Oceania\">Oceania</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport {Form}","import React from 'react'\r\nimport {Card} from './Card'\r\nimport {Form} from './Form'\r\n\r\nfunction Main (props) {\r\n\r\n    // Setting state for form to conditionally map cards within Main component\r\n\r\n    const [formData, setFormData] = React.useState({\r\n        countryName: \"\",\r\n        regionName: \"\"\r\n    })\r\n\r\n    // Function to alter state to change component/section to the quiz section\r\n\r\n    function renderQuizSection () {\r\n        return props.setToggleQuizSection(true)\r\n    }\r\n \r\n    // Update chooseCountry state and toggle state on click event handler of each card for the Section component\r\n    \r\n    function selectCard (id) {\r\n        props.countryData.map(currentObject => {\r\n            if (currentObject.name.common === id) {\r\n                props.setChooseCountry(currentObject)\r\n                props.setToggleSection(true)\r\n            }\r\n        })\r\n    } \r\n\r\n    // Render API to Card once API has been fetched dependent upon search conditions\r\n\r\n    // Render Countries to the Card component with conditional rendering included for form requirements\r\n\r\n    const renderSearchedCountry = props.countryData.map(currentCountry => {\r\n        let lowerCase = currentCountry.name.common.toLowerCase()\r\n        if (formData.countryName && formData.regionName) {\r\n            if (lowerCase.includes(formData.countryName.toLowerCase()) && currentCountry.region === formData.regionName) {\r\n                return (\r\n                    <Card\r\n                        key = {currentCountry.name.common}\r\n                        item = {currentCountry}\r\n                        selectCard = {() => selectCard(currentCountry.name.common)}\r\n                        toggleDarkMode = {props.toggleDarkMode}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n\r\n        else if (formData.regionName) {\r\n            if (formData.regionName === currentCountry.region) {\r\n                return (\r\n                    <Card\r\n                        key = {currentCountry.name.common}\r\n                        item = {currentCountry}\r\n                        selectCard = {() => selectCard(currentCountry.name.common)}\r\n                        toggleDarkMode = {props.toggleDarkMode}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n\r\n        else if (formData.countryName) {\r\n            if (lowerCase.includes(formData.countryName.toLowerCase())) {\r\n                return (\r\n                    <Card\r\n                        key = {currentCountry.name.common}\r\n                        item = {currentCountry}\r\n                        selectCard = {() => selectCard(currentCountry.name.common)}\r\n                        toggleDarkMode = {props.toggleDarkMode}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n        else {\r\n            return (\r\n                <Card\r\n                    key = {currentCountry.name.common}\r\n                    item = {currentCountry}\r\n                    selectCard = {() => selectCard(currentCountry.name.common)}\r\n                    toggleDarkMode = {props.toggleDarkMode}\r\n                />\r\n            )\r\n        }\r\n    })\r\n\r\n    return (\r\n        <main className= {props.toggleDarkMode ? \"DarkMain Main-home-section\" : \"LightMain Main-home-section\"}>\r\n            <div className='Home-outer-container'>\r\n                <button onClick= {renderQuizSection}>Quiz Section!</button>\r\n                <div className='Home-form-container'>\r\n                    <Form \r\n                        formData = {formData}\r\n                        setFormData = {setFormData}\r\n                        toggleDarkMode = {props.toggleDarkMode}\r\n                    />\r\n                </div>\r\n                <div className='Home-card-container'>\r\n                    {renderSearchedCountry}\r\n                </div>\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport {Main}","import React from 'react'\r\nimport {formatPopulation} from './globalFunctions'\r\n\r\nfunction Section (props) {\r\n\r\n    const [borderCountry, setBorderCountry] = React.useState([])\r\n    \r\n    function backToMain () {\r\n        props.setToggleSection (false)\r\n    }\r\n\r\n    // Obtaining Native Name and Currencies data which has keys that are country specific\r\n\r\n    let nativeNameObj = props.item.name.nativeName\r\n    let nativeNameFirst = nativeNameObj[Object.keys(nativeNameObj)[0]]\r\n\r\n    let currencyObj = props.item.currencies\r\n    let currencyObjFirst = currencyObj[Object.keys(currencyObj)[0]]\r\n\r\n    // Mapping through languages to alter string to be rendered to the section\r\n\r\n    let languagesArray = Object.values(props.item.languages)\r\n    let languageString = \"\"\r\n    languagesArray.map((language, i, languagesArray) => {\r\n        return languagesArray.length - 1 === i ? languageString += `${language}` : languageString += `${language}, `\r\n    })\r\n\r\n    // Bordering Countries section\r\n\r\n    // Function which updates the borderCountry state to include the objects for each country that borders the current selected country\r\n\r\n    function borderMap () {\r\n        if (props.item.borders) {\r\n            props.countryData.map(country => {\r\n                if (props.item.borders.includes(country.cca3)) {\r\n                    setBorderCountry(prevState => {\r\n                        return [...prevState, country]\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    // Use effect so that the bordermap function runs only when the selected country has changed, it also returns a cleaning function to reset the borderstate\r\n\r\n    React.useEffect(()=> {\r\n        props.item.borders && borderMap()\r\n\r\n        return () => {\r\n            setBorderCountry([])\r\n        }\r\n\r\n    }, [props.item])\r\n\r\n    console.log(borderCountry)\r\n\r\n    // Function to map through buttons for the border countries section with an onclick event to change the chooseCountry state to that of the buttons\r\n\r\n    const borderButtons = borderCountry.map(country => {\r\n        return <button className= {props.toggleDarkMode ? \"DarkMinor Country-section-button\" : \"LightMinor Country-section-button\"}\r\n        onClick={() => props.setChooseCountry(country)} key={country.name.common}>\r\n        {country.name.common}</button>\r\n    })\r\n    \r\n    return (\r\n        <section className= {props.toggleDarkMode ? \"DarkMain Country-section-outer\" : \"LightMain Country-section-outer\"}>\r\n            <div className='Country-section'>\r\n                <button className='Country-section-button Back-button' onClick={backToMain}>&#8592; Back</button>\r\n                <div className='Country-section-container'>\r\n                    <img src = {props.item.flags.svg} alt = {`${props.item.name.common} flag`}/>\r\n                    <div className='Country-section-container-inner'>\r\n                        <h1>{props.item.name.common}</h1>\r\n                        <div className='Country-section-container-inner-leftlist'>\r\n                            <ul>\r\n                                <li><span>Native Name: </span>{nativeNameFirst.common ? `${nativeNameFirst.common}` : \"Nil native name\"}</li>\r\n                                <li><span>Population:</span> {formatPopulation(props.item.population)}</li>\r\n                                <li><span>Region:</span> {props.item.region}</li>\r\n                                <li><span>Sub Region:</span> {props.item.subregion}</li>\r\n                                <li><span>Capital:</span> {props.item.capital}</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className='Country-section-container-inner-rightlist'>\r\n                            <ul>\r\n                                <li><span>Top Level Domain:</span> {props.item.tld ? `${props.item.tld[0]}` : \"There is nil top level domain\"} </li>\r\n                                <li><span>Currencies:</span> {currencyObjFirst.name}</li>\r\n                                <li><span>Languages:</span> {languageString} </li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className='Country-section-container-inner-bottom'>\r\n                            <p><span className='Border-buttons-span'>Border Countries:</span> {borderButtons} </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport {Section}","import React from 'react'\r\nimport {randomCountry} from './globalFunctions'\r\n\r\nfunction CapitalCityQuestion (props) {\r\n    \r\n    const [wrongCountryOne, setWrongCountryOne] = React.useState(randomCountry(props.item))\r\n    const [wrongCountryTwo, setWrongCountryTwo] = React.useState(randomCountry(props.item))\r\n    const [userSelection, setUserSelection] = React.useState()\r\n    const [chosenArray,setChosenArray] = React.useState()\r\n\r\n    // A mapping feature to map two incorrect button answers with the two correct answers\r\n\r\n    let allCountriesArrayOne = [props.countryOne, props.countryTwo, wrongCountryOne, wrongCountryTwo]\r\n    let allCountriesArrayTwo = [wrongCountryOne, props.countryOne, wrongCountryTwo, props.countryTwo]\r\n    let allCountriesArrayThree = [wrongCountryTwo, wrongCountryOne, props.countryTwo, props.countryOne]\r\n    let randomCountriesArray = [allCountriesArrayOne, allCountriesArrayTwo, allCountriesArrayThree]\r\n\r\n    console.log(chosenArray)\r\n    console.log(userSelection)\r\n\r\n    function randomisedArray() {\r\n        setChosenArray(randomCountry(randomCountriesArray))\r\n    }\r\n\r\n    //A useEffect statement to prevent infinite calling of a randomised array\r\n\r\n    React.useEffect(() => {\r\n        randomisedArray()   \r\n    }, [])\r\n\r\n    function mapButtons () {\r\n        if (chosenArray) {\r\n            let mappedButtons = chosenArray.map(currentCountry => {\r\n                return <button onClick = {() => setUserSelection(currentCountry.capital)}>{currentCountry.capital}</button>\r\n            })\r\n            return mappedButtons\r\n        }\r\n    }\r\n\r\n    // Logic for updating score/attempted questions and clarifying correct answer\r\n\r\n    function updateStates () {\r\n        if (userSelection) {\r\n            if (userSelection === props.countryOne.capital || userSelection === props.countryTwo.capital) {\r\n                props.setScore(prevScore => prevScore + 1)\r\n                props.setQuestionsAsked(prevScore => prevScore + 1)\r\n            } else {\r\n                props.setQuestionsAsked(prevScore => prevScore + 1)\r\n            }\r\n        }\r\n    }\r\n    React.useEffect(() => {\r\n        updateStates()\r\n    }, [userSelection])\r\n    \r\n    function checkAnswers () {\r\n        if (userSelection){\r\n            if (userSelection === props.countryOne.capital || userSelection === props.countryTwo.capital) {\r\n                return <h3>Congratulations you got it right!</h3>\r\n            }\r\n            else {\r\n                return (\r\n                <h3>\r\n                    Sorry you got it wrong! The correct answers were: {props.countryOne.capital} ({props.countryOne.name.common}) or {props.countryTwo.capital} ({props.countryTwo.name.common})\r\n                </h3>\r\n                )\r\n            }\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h2>Which of the below is the capital city of either {props.countryOne.name.common} or {props.countryTwo.name.common}</h2>\r\n            {mapButtons()}\r\n            {checkAnswers()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {CapitalCityQuestion}","import React from 'react'\r\nimport {Card} from './Card'\r\nimport {randomCountry} from './globalFunctions'\r\n\r\nimport {CapitalCityQuestion} from './QuizSectionCapitalCity'\r\n\r\nfunction QuizSection (props) {\r\n\r\n    const [countryOne, setCountryOne] = React.useState(randomCountry(props.item))\r\n    const [countryTwo, setCountryTwo] = React.useState(randomCountry(props.item))\r\n    const [score, setScore] = React.useState(0)\r\n    const [questionsAsked, setQuestionsAsked] = React.useState(0)\r\n\r\n\r\n    console.log(score)\r\n    console.log(questionsAsked)\r\n    // function to return to Main Component\r\n\r\n    function returnToMain () {\r\n        return props.setToggleQuizSection(false)\r\n    }\r\n\r\n    // Rendering country cards to Quiz Section Component\r\n\r\n    let cardsArray = [countryOne, countryTwo]\r\n    const renderCountries = cardsArray.map(currentCountry => {\r\n        return (\r\n            <Card\r\n                key = {currentCountry.name.common}\r\n                item = {currentCountry}\r\n                toggleQuizSection = {props.toggleQuizSection}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <section>\r\n            <div className='QuizSection-inner'>\r\n                <h1>This is the Quiz Section</h1>\r\n                <button onClick={returnToMain}>Back</button>\r\n                <p>Score: {score}/{questionsAsked}</p>\r\n                {renderCountries}\r\n                <CapitalCityQuestion\r\n                    countryOne = {countryOne}\r\n                    countryTwo = {countryTwo}\r\n                    item = {props.item}\r\n                    score = {score}\r\n                    setScore = {setScore}\r\n                    setQuestionsAsked = {setQuestionsAsked}\r\n                />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport {QuizSection}","import React from 'react';\nimport './App.css';\nimport {Navbar} from './Navbar';\nimport {Main} from './Main'\nimport {Section} from './Section'\nimport { QuizSection } from './QuizSection';\n\nfunction App() {\n\n  const [countryData, setCountryData] = React.useState(null)\n  const [chooseCountry, setChooseCountry] = React.useState()\n  const [toggleSection, setToggleSection] = React.useState(false)\n  const [toggleQuizSection, setToggleQuizSection] = React.useState(false)\n  const [toggleDarkMode, setToggleDarkMode] = React.useState(false)\n    \n\n  //Call API function\n  async function getCountryAPI () {\n      const res = await fetch(\"https://restcountries.com/v3.1/all\")\n      const data = await res.json()\n      setCountryData(data)\n  }\n\n  console.log(countryData)\n\n\n  //Call API useEffect conditions\n  React.useEffect(() => {\n      getCountryAPI()\n    }, [])\n  \n\n  // Render API to Main once API has been fetched\n\n  function renderMainComponent () {\n    if (countryData != null){\n      return (\n        <Main \n          countryData = {countryData}\n          setCountryData = {setCountryData}\n          chooseCountry = {chooseCountry}\n          setChooseCountry = {setChooseCountry}\n          toggleSection = {toggleSection}\n          setToggleSection = {setToggleSection}\n          toggleDarkMode = {toggleDarkMode}\n          toggleQuizSection = {toggleQuizSection}\n          setToggleQuizSection = {setToggleQuizSection}\n        />\n      )\n    }\n  }\n\n  // Render Specific Country Section function when Card has been clicked\n\n  function renderSectionComponent () {\n    return (\n      <Section\n        countryData = {countryData}\n        item = {chooseCountry}\n        setChooseCountry = {setChooseCountry}\n        toggleSection = {toggleSection} \n        setToggleSection = {setToggleSection}\n        toggleDarkMode = {toggleDarkMode}\n      />\n    )\n  }\n\n  // Render Quiz Section when its button has been clicked\n\n  function renderQuizSectionComponent () {\n    return (\n      <QuizSection\n        item = {countryData}\n        toggleQuizSection = {toggleQuizSection}\n        setToggleQuizSection = {setToggleQuizSection}\n      />\n    )\n  }\n\n  // Determine what needs to be rendered to the screen using state toggle logic\n\n  function sectionRender () {\n    if (!toggleSection && !toggleQuizSection) {\n      return renderMainComponent()\n    } else if (toggleSection && !toggleQuizSection) {\n      return renderSectionComponent()\n    } else if (!toggleSection && toggleQuizSection) {\n      return renderQuizSectionComponent()\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <Navbar\n        toggleDarkMode = {toggleDarkMode}\n        setToggleDarkMode = {setToggleDarkMode}\n       />\n      {sectionRender()}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}