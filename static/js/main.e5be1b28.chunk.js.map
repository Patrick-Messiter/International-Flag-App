{"version":3,"sources":["Navbar.js","globalFunctions.js","Card.js","Form.js","Main.js","Section.js","QuizSectionCapitalCity.js","QuizSection.js","App.js","index.js"],"names":["Navbar","props","togglingMode","setToggleDarkMode","toggleDarkMode","react_default","a","createElement","className","onClick","formatPopulation","num","stringNumber","toString","replace","randomCountry","array","Math","floor","random","length","Card","selectCard","src","item","flags","png","alt","concat","name","common","population","region","capital","Form","formSearch","event","setFormData","prevFormData","Object","objectSpread","defineProperty","target","value","type","placeholder","onChange","formData","countryName","id","regionName","hidden","Main","_React$useState","React","useState","_React$useState2","slicedToArray","countryData","map","currentObject","setChooseCountry","setToggleSection","renderSearchedCountry","currentCountry","lowerCase","toLowerCase","includes","key","setToggleQuizSection","Section","borderCountry","setBorderCountry","nativeNameObj","nativeName","nativeNameFirst","keys","currencyObj","currencies","currencyObjFirst","languagesArray","values","languages","languageString","language","i","useEffect","borders","country","cca3","prevState","toConsumableArray","console","log","borderButtons","svg","subregion","tld","CapitalCityQuestion","wrongCountryOne","_React$useState3","_React$useState4","wrongCountryTwo","_React$useState5","_React$useState6","userSelection","setUserSelection","allCountriesArray","countryOne","countryTwo","randomCountriesArray","push","randomisedArray","mapButtons","answersComponent","QuizSection","renderCountries","App","setCountryData","chooseCountry","toggleSection","_React$useState7","_React$useState8","toggleQuizSection","_React$useState9","_React$useState10","_getCountryAPI","asyncToGenerator","_regeneratorRuntime","mark","_callee","res","data","wrap","_context","prev","next","fetch","sent","json","stop","apply","this","arguments","getCountryAPI","renderMainComponent","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e5be1b28.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Navbar (props) {\r\n\r\n    function togglingMode() {\r\n        props.setToggleDarkMode(!props.toggleDarkMode)\r\n    }\r\n\r\n    return (\r\n        <nav className={props.toggleDarkMode ? \"DarkMinor Navbar\" : \"LightMinor Navbar\"}>\r\n            <div className='Navbar-inner'>\r\n                <h1>Where in the world?</h1>\r\n                {props.toggleDarkMode ? <h4 onClick={() => togglingMode()}><span>&#127774;</span> Light Mode</h4> :\r\n                <h4 onClick={() => togglingMode()}><span>&#127769;</span> Dark Mode</h4>}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport {Navbar}","\r\n// Number with commas added\r\n\r\nfunction formatPopulation(num) {\r\n    let stringNumber = num.toString()\r\n    stringNumber = stringNumber.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n    return stringNumber\r\n}\r\n\r\nfunction randomCountry(array) {\r\n    return array[Math.floor(Math.random() * array.length - 1)]\r\n}\r\n\r\nexport {formatPopulation}\r\nexport {randomCountry}","import React from 'react'\r\nimport {formatPopulation} from './globalFunctions'\r\n\r\nfunction Card (props) {\r\n    \r\n    return (\r\n        <div onClick={props.selectCard} className={props.toggleDarkMode ? \"DarkMinor Card-container\" : \"LightMinor Card-container\"}>\r\n            <img src={props.item.flags.png} alt={`${props.item.name.common} flag`}/>\r\n            <div className='Card-container-inner'>\r\n                <h3>{props.item.name.common}</h3>\r\n                <ul>\r\n                    <li><span>Population:</span> {formatPopulation(props.item.population)}</li>\r\n                    <li><span>Region:</span> {props.item.region}</li>\r\n                    <li><span>Capital:</span> {props.item.capital}</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {Card}","import React from 'react'\r\n\r\nfunction Form (props) {\r\n\r\n    function formSearch(event) {\r\n        props.setFormData(prevFormData => {\r\n            return {\r\n                ...prevFormData,\r\n                [event.target.name]: event.target.value\r\n            }\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <form className='Form-container'>\r\n            <div className= {props.toggleDarkMode ? \"DarkMinor Form-input-container\" : \"LightMinor Form-input-container\"}>\r\n                <p><span>&#x1F50D;</span></p>\r\n                <input className={props.toggleDarkMode ? \"DarkMinor Form-input\" : \"LightMinor Form-input\"}\r\n                    type=\"text\"\r\n                    placeholder='Search for a country'\r\n                    name=\"countryName\"\r\n                    onChange = {formSearch}\r\n                    value = {props.formData.countryName}\r\n                />\r\n            </div>\r\n            <div className= \"Form-select-container\">\r\n                <select\r\n                    id= \"regionName\"\r\n                    value = {props.formData.regionName}\r\n                    onChange = {formSearch}\r\n                    name=\"regionName\"\r\n                    className={props.toggleDarkMode ? \"DarkMinor\" : \"LightMinor\"}\r\n                >\r\n                    <option hidden value=\"\">Filter by Region</option>\r\n                    <option hidden={!props.formData.regionName} value=\"\">None</option>\r\n                    <option value=\"Africa\">Africa</option>\r\n                    <option value=\"Americas\">America</option>\r\n                    <option value=\"Asia\">Asia</option>\r\n                    <option value=\"Europe\">Europe</option>\r\n                    <option value=\"Oceania\">Oceania</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport {Form}","import React from 'react'\r\nimport {Card} from './Card'\r\nimport {Form} from './Form'\r\n\r\nfunction Main (props) {\r\n\r\n    // Setting state for form to conditionally map cards within Main component\r\n\r\n    const [formData, setFormData] = React.useState({\r\n        countryName: \"\",\r\n        regionName: \"\"\r\n    })\r\n\r\n    // Function to alter state to change component/section to the quiz section\r\n\r\n    function renderQuizSection () {\r\n        return props.setToggleQuizSection(true)\r\n    }\r\n \r\n    // Update chooseCountry state and toggle state on click event handler of each card for the Section component\r\n    \r\n    function selectCard (id) {\r\n        props.countryData.map(currentObject => {\r\n            if (currentObject.name.common === id) {\r\n                props.setChooseCountry(currentObject)\r\n                props.setToggleSection(true)\r\n            }\r\n        })\r\n    } \r\n\r\n    // Render API to Card once API has been fetched dependent upon search conditions\r\n\r\n    // Render Countries to the Card component with conditional rendering included for form requirements\r\n\r\n    const renderSearchedCountry = props.countryData.map(currentCountry => {\r\n        let lowerCase = currentCountry.name.common.toLowerCase()\r\n        if (formData.countryName && formData.regionName) {\r\n            if (lowerCase.includes(formData.countryName.toLowerCase()) && currentCountry.region === formData.regionName) {\r\n                return (\r\n                    <Card\r\n                        key = {currentCountry.name.common}\r\n                        item = {currentCountry}\r\n                        selectCard = {() => selectCard(currentCountry.name.common)}\r\n                        toggleDarkMode = {props.toggleDarkMode}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n\r\n        else if (formData.regionName) {\r\n            if (formData.regionName === currentCountry.region) {\r\n                return (\r\n                    <Card\r\n                        key = {currentCountry.name.common}\r\n                        item = {currentCountry}\r\n                        selectCard = {() => selectCard(currentCountry.name.common)}\r\n                        toggleDarkMode = {props.toggleDarkMode}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n\r\n        else if (formData.countryName) {\r\n            if (lowerCase.includes(formData.countryName.toLowerCase())) {\r\n                return (\r\n                    <Card\r\n                        key = {currentCountry.name.common}\r\n                        item = {currentCountry}\r\n                        selectCard = {() => selectCard(currentCountry.name.common)}\r\n                        toggleDarkMode = {props.toggleDarkMode}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n        else {\r\n            return (\r\n                <Card\r\n                    key = {currentCountry.name.common}\r\n                    item = {currentCountry}\r\n                    selectCard = {() => selectCard(currentCountry.name.common)}\r\n                    toggleDarkMode = {props.toggleDarkMode}\r\n                />\r\n            )\r\n        }\r\n    })\r\n\r\n    return (\r\n        <main className= {props.toggleDarkMode ? \"DarkMain Main-home-section\" : \"LightMain Main-home-section\"}>\r\n            <div className='Home-outer-container'>\r\n                <button onClick= {renderQuizSection}>Quiz Section!</button>\r\n                <div className='Home-form-container'>\r\n                    <Form \r\n                        formData = {formData}\r\n                        setFormData = {setFormData}\r\n                        toggleDarkMode = {props.toggleDarkMode}\r\n                    />\r\n                </div>\r\n                <div className='Home-card-container'>\r\n                    {renderSearchedCountry}\r\n                </div>\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport {Main}","import React from 'react'\r\nimport {formatPopulation} from './globalFunctions'\r\n\r\nfunction Section (props) {\r\n\r\n    const [borderCountry, setBorderCountry] = React.useState([])\r\n    \r\n    function backToMain () {\r\n        props.setToggleSection (false)\r\n    }\r\n\r\n    // Obtaining Native Name and Currencies data which has keys that are country specific\r\n\r\n    let nativeNameObj = props.item.name.nativeName\r\n    let nativeNameFirst = nativeNameObj[Object.keys(nativeNameObj)[0]]\r\n\r\n    let currencyObj = props.item.currencies\r\n    let currencyObjFirst = currencyObj[Object.keys(currencyObj)[0]]\r\n\r\n    // Mapping through languages to alter string to be rendered to the section\r\n\r\n    let languagesArray = Object.values(props.item.languages)\r\n    let languageString = \"\"\r\n    languagesArray.map((language, i, languagesArray) => {\r\n        return languagesArray.length - 1 === i ? languageString += `${language}` : languageString += `${language}, `\r\n    })\r\n\r\n    // Bordering Countries section\r\n\r\n    // Function which updates the borderCountry state to include the objects for each country that borders the current selected country\r\n\r\n    function borderMap () {\r\n        if (props.item.borders) {\r\n            props.countryData.map(country => {\r\n                if (props.item.borders.includes(country.cca3)) {\r\n                    setBorderCountry(prevState => {\r\n                        return [...prevState, country]\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    // Use effect so that the bordermap function runs only when the selected country has changed, it also returns a cleaning function to reset the borderstate\r\n\r\n    React.useEffect(()=> {\r\n        props.item.borders && borderMap()\r\n\r\n        return () => {\r\n            setBorderCountry([])\r\n        }\r\n\r\n    }, [props.item])\r\n\r\n    console.log(borderCountry)\r\n\r\n    // Function to map through buttons for the border countries section with an onclick event to change the chooseCountry state to that of the buttons\r\n\r\n    const borderButtons = borderCountry.map(country => {\r\n        return <button className= {props.toggleDarkMode ? \"DarkMinor Country-section-button\" : \"LightMinor Country-section-button\"}\r\n        onClick={() => props.setChooseCountry(country)} key={country.name.common}>\r\n        {country.name.common}</button>\r\n    })\r\n    \r\n    return (\r\n        <section className= {props.toggleDarkMode ? \"DarkMain Country-section-outer\" : \"LightMain Country-section-outer\"}>\r\n            <div className='Country-section'>\r\n                <button className='Country-section-button Back-button' onClick={backToMain}>&#8592; Back</button>\r\n                <div className='Country-section-container'>\r\n                    <img src = {props.item.flags.svg} alt = {`${props.item.name.common} flag`}/>\r\n                    <div className='Country-section-container-inner'>\r\n                        <h1>{props.item.name.common}</h1>\r\n                        <div className='Country-section-container-inner-leftlist'>\r\n                            <ul>\r\n                                <li><span>Native Name: </span>{nativeNameFirst.common ? `${nativeNameFirst.common}` : \"Nil native name\"}</li>\r\n                                <li><span>Population:</span> {formatPopulation(props.item.population)}</li>\r\n                                <li><span>Region:</span> {props.item.region}</li>\r\n                                <li><span>Sub Region:</span> {props.item.subregion}</li>\r\n                                <li><span>Capital:</span> {props.item.capital}</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className='Country-section-container-inner-rightlist'>\r\n                            <ul>\r\n                                <li><span>Top Level Domain:</span> {props.item.tld ? `${props.item.tld[0]}` : \"There is nil top level domain\"} </li>\r\n                                <li><span>Currencies:</span> {currencyObjFirst.name}</li>\r\n                                <li><span>Languages:</span> {languageString} </li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className='Country-section-container-inner-bottom'>\r\n                            <p><span className='Border-buttons-span'>Border Countries:</span> {borderButtons} </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport {Section}","import React from 'react'\r\nimport {randomCountry} from './globalFunctions'\r\n\r\nfunction CapitalCityQuestion (props) {\r\n    \r\n    const [wrongCountryOne, setWrongCountryOne] = React.useState(randomCountry(props.item))\r\n    const [wrongCountryTwo, setWrongCountryTwo] = React.useState(randomCountry(props.item))\r\n    const [userSelection, setUserSelection] = React.useState()\r\n\r\n    // A mapping feature to map two incorrect button answers with the two correct answers\r\n\r\n    let allCountriesArray = [props.countryOne, props.countryTwo, wrongCountryOne, wrongCountryTwo]\r\n\r\n    function randomisedArray() {\r\n        let randomCountriesArray = []\r\n        if (randomCountriesArray.length <=4) {\r\n            randomCountriesArray.push(randomCountry(allCountriesArray))\r\n            /*\r\n            if (!randomCountriesArray.includes(props.countryOne)) {\r\n                randomCountriesArray.push(props.countryOne)\r\n            }*/\r\n        }\r\n        return randomCountriesArray\r\n    }\r\n\r\n    //IMPORTANT THINGS TO WORK ON NEXT TIME, RANDOMISING COUNTRIES ARRAY AND ALTERING QUESTION TO NOT INCLUDE CAPITAL CITY OR ALTER CARD\r\n\r\n    console.log(randomisedArray())\r\n\r\n    let randomCountriesArray = Math.floor(Math.random() * allCountriesArray.length -1)\r\n\r\n    // A mapping feature to map two incorrect button answers with the two correct answers\r\n\r\n    const mapButtons = allCountriesArray.map(currentCountry => {\r\n        return (\r\n            <button onClick = {() => setUserSelection(currentCountry.capital)}>{currentCountry.capital}</button>\r\n        )\r\n    })\r\n\r\n    function checkAnswers () {\r\n        if (userSelection === props.countryOne.capital || userSelection === props.countryTwo.capital) {\r\n            return <h3>Congratulations you got it right!</h3>\r\n        } else {\r\n            return (\r\n            <h3>\r\n                Sorry you got it wrong! The correct answers were: {props.countryOne.capital} ({props.countryOne.name.common}) or {props.countryTwo.capital} ({props.countryTwo.name.common})\r\n            </h3>\r\n            )\r\n        }\r\n    }\r\n\r\n    function answersComponent () {\r\n        if (userSelection) {\r\n            return checkAnswers()\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h2>Which of the below is the capital city of either {props.countryOne.name.common} or {props.countryTwo.name.common}</h2>\r\n            {mapButtons}\r\n            {answersComponent()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {CapitalCityQuestion}","import React from 'react'\r\nimport {Card} from './Card'\r\nimport {randomCountry} from './globalFunctions'\r\n\r\nimport {CapitalCityQuestion} from './QuizSectionCapitalCity'\r\n\r\nfunction QuizSection (props) {\r\n\r\n    const [countryOne, setCountryOne] = React.useState(randomCountry(props.item))\r\n    const [countryTwo, setCountryTwo] = React.useState(randomCountry(props.item))\r\n\r\n    console.log(countryOne)\r\n\r\n    console.log(countryTwo)\r\n\r\n    // function to return to Main Component\r\n\r\n    function returnToMain () {\r\n        return props.setToggleQuizSection(false)\r\n    }\r\n\r\n    // Rendering country cards to Quiz Section Component\r\n\r\n    let cardsArray = [countryOne, countryTwo]\r\n    const renderCountries = cardsArray.map(currentCountry => {\r\n        return (\r\n            <Card\r\n                key = {currentCountry.name.common}\r\n                item = {currentCountry}\r\n            />\r\n        )\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <section>\r\n            <div className='QuizSection-inner'>\r\n                <h1>This is the Quiz Section</h1>\r\n                <button onClick={returnToMain}>Back</button>\r\n                {renderCountries}\r\n                <CapitalCityQuestion\r\n                    countryOne = {countryOne}\r\n                    countryTwo = {countryTwo}\r\n                    item = {props.item}\r\n                />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport {QuizSection}","import React from 'react';\nimport './App.css';\nimport {Navbar} from './Navbar';\nimport {Main} from './Main'\nimport {Section} from './Section'\nimport { QuizSection } from './QuizSection';\n\nfunction App() {\n\n  const [countryData, setCountryData] = React.useState(null)\n  const [chooseCountry, setChooseCountry] = React.useState()\n  const [toggleSection, setToggleSection] = React.useState(false)\n  const [toggleQuizSection, setToggleQuizSection] = React.useState(false)\n  const [toggleDarkMode, setToggleDarkMode] = React.useState(false)\n    \n\n  //Call API function\n  async function getCountryAPI () {\n      const res = await fetch(\"https://restcountries.com/v3.1/all\")\n      const data = await res.json()\n      setCountryData(data)\n  }\n\n  console.log(countryData)\n\n\n  //Call API useEffect conditions\n  React.useEffect(() => {\n      getCountryAPI()\n    }, [])\n  \n\n  // Render API to Main once API has been fetched\n\n  function renderMainComponent () {\n    if (countryData != null){\n      return (\n        <Main \n          countryData = {countryData}\n          setCountryData = {setCountryData}\n          chooseCountry = {chooseCountry}\n          setChooseCountry = {setChooseCountry}\n          toggleSection = {toggleSection}\n          setToggleSection = {setToggleSection}\n          toggleDarkMode = {toggleDarkMode}\n          toggleQuizSection = {toggleQuizSection}\n          setToggleQuizSection = {setToggleQuizSection}\n        />\n      )\n    }\n  }\n\n  // Render Specific Country Section function when Card has been clicked\n\n  function renderSectionComponent () {\n    return (\n      <Section\n        countryData = {countryData}\n        item = {chooseCountry}\n        setChooseCountry = {setChooseCountry}\n        toggleSection = {toggleSection} \n        setToggleSection = {setToggleSection}\n        toggleDarkMode = {toggleDarkMode}\n      />\n    )\n  }\n\n  // Render Quiz Section when its button has been clicked\n\n  function renderQuizSectionComponent () {\n    return (\n      <QuizSection\n        item = {countryData}\n        toggleQuizSection = {toggleQuizSection}\n        setToggleQuizSection = {setToggleQuizSection}\n      />\n    )\n  }\n\n  // Determine what needs to be rendered to the screen using state toggle logic\n\n  function sectionRender () {\n    if (!toggleSection && !toggleQuizSection) {\n      return renderMainComponent()\n    } else if (toggleSection && !toggleQuizSection) {\n      return renderSectionComponent()\n    } else if (!toggleSection && toggleQuizSection) {\n      return renderQuizSectionComponent()\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <Navbar\n        toggleDarkMode = {toggleDarkMode}\n        setToggleDarkMode = {setToggleDarkMode}\n       />\n      {sectionRender()}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}