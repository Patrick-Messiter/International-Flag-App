{"version":3,"sources":["Navbar.js","globalFunctions.js","Card.js","Form.js","Main.js","Section.js","App.js","index.js"],"names":["Navbar","props","togglingMode","setToggleDarkMode","toggleDarkMode","react_default","a","createElement","className","onClick","formatPopulation","num","stringNumber","toString","replace","Card","selectCard","src","item","flags","png","alt","concat","name","common","population","region","capital","Form","formSearch","event","setFormData","prevFormData","Object","objectSpread","defineProperty","target","value","type","placeholder","onChange","formData","countryName","id","regionName","hidden","Main","_React$useState","React","useState","_React$useState2","slicedToArray","countryData","map","currentObject","setChooseCountry","setToggleSection","console","log","renderSearchedCountry","currentCountry","lowerCase","toLowerCase","includes","key","Section","borderCountry","setBorderCountry","nativeNameObj","nativeName","nativeNameFirst","keys","currencyObj","currencies","currencyObjFirst","languagesArray","values","languages","languageString","language","i","length","useEffect","borders","country","cca3","prevState","toConsumableArray","borderButtons","svg","subregion","tld","App","setCountryData","_React$useState3","_React$useState4","chooseCountry","_React$useState5","_React$useState6","toggleSection","_React$useState7","_React$useState8","_getCountryAPI","asyncToGenerator","_regeneratorRuntime","mark","_callee","res","data","wrap","_context","prev","next","fetch","sent","json","stop","apply","this","arguments","getCountryAPI","renderMainComponent","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.11f497f9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Navbar (props) {\r\n\r\n    function togglingMode() {\r\n        props.setToggleDarkMode(!props.toggleDarkMode)\r\n    }\r\n\r\n    return (\r\n        <nav className={props.toggleDarkMode ? \"DarkMinor Navbar\" : \"LightMinor Navbar\"}>\r\n            <div className='Navbar-inner'>\r\n                <h1>Where in the world?</h1>\r\n                {props.toggleDarkMode ? <h4 onClick={() => togglingMode()}><span>&#127774;</span> Light Mode</h4> :\r\n                <h4 onClick={() => togglingMode()}><span>&#127769;</span> Dark Mode</h4>}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport {Navbar}","\r\n// Number with commas added\r\n\r\nfunction formatPopulation(num) {\r\n    let stringNumber = num.toString()\r\n    stringNumber = stringNumber.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n    return stringNumber\r\n}\r\n\r\nexport {formatPopulation}","import React from 'react'\r\nimport {formatPopulation} from './globalFunctions'\r\n\r\nfunction Card (props) {\r\n    \r\n    return (\r\n        <div onClick={props.selectCard} className={props.toggleDarkMode ? \"DarkMinor Card-container\" : \"LightMinor Card-container\"}>\r\n            <img src={props.item.flags.png} alt={`${props.item.name.common} flag`}/>\r\n            <div className='Card-container-inner'>\r\n                <h3>{props.item.name.common}</h3>\r\n                <ul>\r\n                    <li><span>Population:</span> {formatPopulation(props.item.population)}</li>\r\n                    <li><span>Region:</span> {props.item.region}</li>\r\n                    <li><span>Capital:</span> {props.item.capital}</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {Card}","import React from 'react'\r\n\r\nfunction Form (props) {\r\n\r\n    function formSearch(event) {\r\n        props.setFormData(prevFormData => {\r\n            return {\r\n                ...prevFormData,\r\n                [event.target.name]: event.target.value\r\n            }\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <form className='Form-container'>\r\n            <div className= {props.toggleDarkMode ? \"DarkMinor Form-input-container\" : \"LightMinor Form-input-container\"}>\r\n                <p><span>&#x1F50D;</span></p>\r\n                <input className={props.toggleDarkMode ? \"DarkMinor Form-input\" : \"LightMinor Form-input\"}\r\n                    type=\"text\"\r\n                    placeholder='Search for a country'\r\n                    name=\"countryName\"\r\n                    onChange = {formSearch}\r\n                    value = {props.formData.countryName}\r\n                />\r\n            </div>\r\n            <div className= \"Form-select-container\">\r\n                <select\r\n                    id= \"regionName\"\r\n                    value = {props.formData.regionName}\r\n                    onChange = {formSearch}\r\n                    name=\"regionName\"\r\n                    className={props.toggleDarkMode ? \"DarkMinor\" : \"LightMinor\"}\r\n                >\r\n                    <option hidden value=\"\">Filter by Region</option>\r\n                    <option hidden={!props.formData.regionName} value=\"\">None</option>\r\n                    <option value=\"Africa\">Africa</option>\r\n                    <option value=\"Americas\">America</option>\r\n                    <option value=\"Asia\">Asia</option>\r\n                    <option value=\"Europe\">Europe</option>\r\n                    <option value=\"Oceania\">Oceania</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport {Form}","import React from 'react'\r\nimport {Card} from './Card'\r\nimport {Form} from './Form'\r\n\r\nfunction Main (props) {\r\n\r\n    // Setting state for form to conditionally map cards within Main component\r\n\r\n    const [formData, setFormData] = React.useState({\r\n        countryName: \"\",\r\n        regionName: \"\"\r\n    })\r\n \r\n    // Update chooseCountry state and toggle state on click event handler of each card for the Section component\r\n    \r\n    function selectCard (id) {\r\n        props.countryData.map(currentObject => {\r\n            if (currentObject.name.common === id) {\r\n                props.setChooseCountry(currentObject)\r\n                props.setToggleSection(true)\r\n            }\r\n        })\r\n    } \r\n\r\n    console.log(formData.countryName)\r\n\r\n    // Render API to Card once API has been fetched dependent upon search conditions\r\n\r\n    // Render Countries to the Card component with conditional rendering included for form requirements\r\n\r\n    const renderSearchedCountry = props.countryData.map(currentCountry => {\r\n        let lowerCase = currentCountry.name.common.toLowerCase()\r\n        if (formData.countryName && formData.regionName) {\r\n            if (lowerCase.includes(formData.countryName.toLowerCase()) && currentCountry.region === formData.regionName) {\r\n                return (\r\n                    <Card\r\n                        key = {currentCountry.name.common}\r\n                        item = {currentCountry}\r\n                        selectCard = {() => selectCard(currentCountry.name.common)}\r\n                        toggleDarkMode = {props.toggleDarkMode}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n\r\n        else if (formData.regionName) {\r\n            if (formData.regionName === currentCountry.region) {\r\n                return (\r\n                    <Card\r\n                        key = {currentCountry.name.common}\r\n                        item = {currentCountry}\r\n                        selectCard = {() => selectCard(currentCountry.name.common)}\r\n                        toggleDarkMode = {props.toggleDarkMode}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n\r\n        else if (formData.countryName) {\r\n            if (lowerCase.includes(formData.countryName.toLowerCase())) {\r\n                return (\r\n                    <Card\r\n                        key = {currentCountry.name.common}\r\n                        item = {currentCountry}\r\n                        selectCard = {() => selectCard(currentCountry.name.common)}\r\n                        toggleDarkMode = {props.toggleDarkMode}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n        else {\r\n            return (\r\n                <Card\r\n                    key = {currentCountry.name.common}\r\n                    item = {currentCountry}\r\n                    selectCard = {() => selectCard(currentCountry.name.common)}\r\n                    toggleDarkMode = {props.toggleDarkMode}\r\n                />\r\n            )\r\n        }\r\n    })\r\n\r\n    return (\r\n        <main className= {props.toggleDarkMode ? \"DarkMain Main-home-section\" : \"LightMain Main-home-section\"}>\r\n            <div className='Home-outer-container'>\r\n                <div className='Home-form-container'>\r\n                    <Form \r\n                        formData = {formData}\r\n                        setFormData = {setFormData}\r\n                        toggleDarkMode = {props.toggleDarkMode}\r\n                    />\r\n                </div>\r\n                <div className='Home-card-container'>\r\n                    {renderSearchedCountry}\r\n                </div>\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport {Main}","import React from 'react'\r\nimport {formatPopulation} from './globalFunctions'\r\n\r\nfunction Section (props) {\r\n\r\n    const [borderCountry, setBorderCountry] = React.useState([])\r\n    \r\n    function backToMain () {\r\n        props.setToggleSection (false)\r\n    }\r\n\r\n    // Obtaining Native Name and Currencies data which has keys that are country specific\r\n\r\n    let nativeNameObj = props.item.name.nativeName\r\n    let nativeNameFirst = nativeNameObj[Object.keys(nativeNameObj)[0]]\r\n\r\n    let currencyObj = props.item.currencies\r\n    let currencyObjFirst = currencyObj[Object.keys(currencyObj)[0]]\r\n\r\n    // Mapping through languages to alter string to be rendered to the section\r\n\r\n    let languagesArray = Object.values(props.item.languages)\r\n    let languageString = \"\"\r\n    languagesArray.map((language, i, languagesArray) => {\r\n        return languagesArray.length - 1 === i ? languageString += `${language}` : languageString += `${language}, `\r\n    })\r\n\r\n    // Bordering Countries section\r\n\r\n    // Function which updates the borderCountry state to include the objects for each country that borders the current selected country\r\n\r\n    function borderMap () {\r\n        if (props.item.borders) {\r\n            props.countryData.map(country => {\r\n                if (props.item.borders.includes(country.cca3)) {\r\n                    setBorderCountry(prevState => {\r\n                        return [...prevState, country]\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    // Use effect so that the bordermap function runs only when the selected country has changed, it also returns a cleaning function to reset the borderstate\r\n\r\n    React.useEffect(()=> {\r\n        props.item.borders && borderMap()\r\n\r\n        return () => {\r\n            setBorderCountry([])\r\n        }\r\n\r\n    }, [props.item])\r\n\r\n    console.log(borderCountry)\r\n\r\n    // Function to map through buttons for the border countries section with an onclick event to change the chooseCountry state to that of the buttons\r\n\r\n    const borderButtons = borderCountry.map(country => {\r\n        return <button className= {props.toggleDarkMode ? \"DarkMinor Country-section-button\" : \"LightMinor Country-section-button\"}\r\n        onClick={() => props.setChooseCountry(country)} key={country.name.common}>\r\n        {country.name.common}</button>\r\n    })\r\n    \r\n    return (\r\n        <section className= {props.toggleDarkMode ? \"DarkMain Country-section-outer\" : \"LightMain Country-section-outer\"}>\r\n            <div className='Country-section'>\r\n                <button className='Country-section-button Back-button' onClick={backToMain}>&#8592; Back</button>\r\n                <div className='Country-section-container'>\r\n                    <img src = {props.item.flags.svg} alt = {`${props.item.name.common} flag`}/>\r\n                    <div className='Country-section-container-inner'>\r\n                        <h1>{props.item.name.common}</h1>\r\n                        <div className='Country-section-container-inner-leftlist'>\r\n                            <ul>\r\n                                <li><span>Native Name: </span>{nativeNameFirst.common ? `${nativeNameFirst.common}` : \"Nil native name\"}</li>\r\n                                <li><span>Population:</span> {formatPopulation(props.item.population)}</li>\r\n                                <li><span>Region:</span> {props.item.region}</li>\r\n                                <li><span>Sub Region:</span> {props.item.subregion}</li>\r\n                                <li><span>Capital:</span> {props.item.capital}</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className='Country-section-container-inner-rightlist'>\r\n                            <ul>\r\n                                <li><span>Top Level Domain:</span> {props.item.tld ? `${props.item.tld[0]}` : \"There is nil top level domain\"} </li>\r\n                                <li><span>Currencies:</span> {currencyObjFirst.name}</li>\r\n                                <li><span>Languages:</span> {languageString} </li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className='Country-section-container-inner-bottom'>\r\n                            <p><span className='Border-buttons-span'>Border Countries:</span> {borderButtons} </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport {Section}","import React from 'react';\nimport './App.css';\nimport {Navbar} from './Navbar';\nimport {Main} from './Main'\nimport {Section} from './Section'\n\nfunction App() {\n\n  const [countryData, setCountryData] = React.useState(null)\n  const [chooseCountry, setChooseCountry] = React.useState()\n  const [toggleSection, setToggleSection] = React.useState(false)\n  const [toggleDarkMode, setToggleDarkMode] = React.useState(false)\n    \n\n  //Call API function\n  async function getCountryAPI () {\n      const res = await fetch(\"https://restcountries.com/v3.1/all\")\n      const data = await res.json()\n      setCountryData(data)\n  }\n\n  console.log(countryData)\n\n\n  //Call API useEffect conditions\n  React.useEffect(() => {\n      getCountryAPI()\n    }, [])\n  \n\n  // Render API to Main once API has been fetched\n\n  function renderMainComponent () {\n    if (countryData != null){\n      return (\n        <Main \n          countryData = {countryData}\n          setCountryData = {setCountryData}\n          chooseCountry = {chooseCountry}\n          setChooseCountry = {setChooseCountry}\n          toggleSection = {toggleSection}\n          setToggleSection = {setToggleSection}\n          toggleDarkMode = {toggleDarkMode}\n        />\n      )\n    }\n  }\n\n  // Render Specific Country function when Card has been clicked\n\n  function renderSectionComponent () {\n    return (\n      <Section\n        countryData = {countryData}\n        item = {chooseCountry}\n        setChooseCountry = {setChooseCountry}\n        toggleSection = {toggleSection} \n        setToggleSection = {setToggleSection}\n        toggleDarkMode = {toggleDarkMode}\n      />\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar\n        toggleDarkMode = {toggleDarkMode}\n        setToggleDarkMode = {setToggleDarkMode}\n       />\n      {toggleSection ? renderSectionComponent() : renderMainComponent()}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}